// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using efsol_api.Data;

namespace efsol_api.Data.Migrations
{
    [DbContext(typeof(EFSOLDbContext))]
    [Migration("20201025150847_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("efsol_api.Data.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserCode")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("efsol_api.Data.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SortOrder")
                        .IsUnique();

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6617d1d9-cc53-4c22-b6ea-9cea93dc23b1"),
                            Content = "Name",
                            SortOrder = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("b27e744d-581f-4a27-9692-697990e475fd"),
                            Content = "Age",
                            SortOrder = 2,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("aaad22ed-31d2-4ab2-8a2b-293e50ab1d66"),
                            Content = "Gender",
                            SortOrder = 3,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("32cfb7f5-cdda-4aa8-9f34-fab1fb96c58d"),
                            Content = "Date of birth",
                            SortOrder = 4,
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("1e75a626-794a-4697-ac19-79b64884b7e4"),
                            Content = "Maritial status",
                            SortOrder = 5,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("758204f2-56b8-4628-aa58-c5bced7332e6"),
                            Content = "Do you love programming?",
                            SortOrder = 6,
                            Type = 3
                        });
                });

            modelBuilder.Entity("efsol_api.Data.Entities.Answer", b =>
                {
                    b.HasOne("efsol_api.Data.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
